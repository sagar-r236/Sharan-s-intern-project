# ...

'''dash_app.layout = html.Div(children=[
    html.Thead([
        html.Title('Mobile Phone Prices and Features Dashboard'),
        html.Link(rel='stylesheet', href='/static/css/style.css')
    ]),

    html.Tbody(children=[
        html.H1(children='Mobile Phone Prices and Features'),

        html.Div(children='''
           
'''),

        dcc.Dropdown(
            id='brand-dropdown',
            options=[{'label': brand, 'value': brand} for brand in df['Brand'].unique()],
            value='Apple'
        ),

        dcc.Graph(
            id='price-graph'
        ),

        dcc.Graph(
            id='color-counts',
            figure={
                'data': [
                    go.Bar(
                        x=df['Color'].value_counts().index,
                        y=df['Color'].value_counts().values
                    )
                ],
                'layout': go.Layout(
                    title='Count of Mobile Phone Colors',
                    xaxis={'title': 'Color'},
                    yaxis={'title': 'Count'}
                )
            }
        ),

        dcc.Graph(
            id='brand-counts',
            figure={
                'data': [
                    go.Bar(
                        x=df['Brand'].value_counts().index,
                        y=df['Brand'].value_counts().values
                    )
                ],
                'layout': go.Layout(
                    title='Count of Mobile Phone Brands',
                    xaxis={'title': 'Brand'},
                    yaxis={'title': 'Count'}
                )
            }
        ),

        dcc.Graph(
            id='ram-counts',
            figure={
                'data': [
                    go.Bar(
                        x=df['Ram'].value_counts().index,
                        y=df['Ram'].value_counts().values
                    )
                ],
                'layout': go.Layout(
                    title='Count of Mobile Phone RAM Sizes',
                    xaxis={'title': 'RAM Size'},
                    yaxis={'title': 'Count'}
                )
            }
        ),
        dcc.Graph(
            id='price-distribution',
            figure={
            'data': [
                     go.Histogram(
                     x=df['Price'],
                     nbinsx=30
                      )
                   ],
           'layout': go.Layout(
                    title='Distribution of Mobile Phone Prices',
                    xaxis={'title': 'Price'},
                   yaxis={'title': 'Count'}
              )
            }
        )   
    ])
])'''

'''dash_app.layout = html.Div(children=[
    html.Thead([
        html.Title('Mobile Phone Prices and Features Dashboard'),
        html.Link(rel='stylesheet', href='/static/css/style.css')
    ]),

    html.Tbody(children=[
        html.H1(children='Mobile Phone Prices and Features'),

        html.Div(children='''
            #Select a brand to see the average price of their phones:
'''),

        dcc.Dropdown(
            id='brand-dropdown',
            options=[{'label': brand, 'value': brand} for brand in df['Brand'].unique()],
            value='Apple'
        ),

        html.Div(className='graph-container', children=[
            dcc.Graph(
                id='price-graph'
            ),

            dcc.Graph(
                id='color-counts',
                figure={
                    'data': [
                        go.Bar(
                            x=df['Color'].value_counts().index,
                            y=df['Color'].value_counts().values
                        )
                    ],
                    'layout': go.Layout(
                        title='Count of Mobile Phone Colors',
                        xaxis={'title': 'Color'},
                        yaxis={'title': 'Count'}
                    )
                }
            ),

            dcc.Graph(
                id='brand-counts',
                figure={
                    'data': [
                        go.Bar(
                            x=df['Brand'].value_counts().index,
                            y=df['Brand'].value_counts().values
                        )
                    ],
                    'layout': go.Layout(
                        title='Count of Mobile Phone Brands',
                        xaxis={'title': 'Brand'},
                        yaxis={'title': 'Count'}
                    )
                }
            ),
        ], style={'float': 'left', 'width': '75%'}),

        html.Div(className='graph-container', children=[
            dcc.Graph(
                id='ram-counts',
                figure={
                    'data': [
                        go.Bar(
                            x=df['Ram'].value_counts().index,
                            y=df['Ram'].value_counts().values
                        )
                    ],
                    'layout': go.Layout(
                        title='Count of Mobile Phone RAM Sizes',
                        xaxis={'title': 'RAM Size'},
                        yaxis={'title': 'Count'}
                    )
                }
            ),
            dcc.Graph(
                id='price-distribution',
                figure={
                    'data': [
                        go.Histogram(
                            x=df['Price'],
                            nbinsx=30
                        )
                    ],
                    'layout': go.Layout(
                        title='Distribution of Mobile Phone Prices',
                        xaxis={'title': 'Price'},
                        yaxis={'title': 'Count'}
                    )
                }
            )   
        ], style={'float': 'right', 'width': '25%'})  
    ])
])'''



'''@dash_app.callback(
    dash.dependencies.Output('price-distribution', 'figure'),
    [dash.dependencies.Input('brand-dropdown', 'value')]
)
def update_price_distribution(selected_brand):
    # Filter the data for the selected brand
    brand_data = df[df['Brand'] == selected_brand]

    # Create a plotly trace for the price distribution data
    trace = go.Histogram(
        x=brand_data['Price'],
        nbinsx=30
    )

    # Define the plot layout
    layout = go.Layout(
        title=f'Distribution of {selected_brand} Phone Prices',
        xaxis={'title': 'Price (USD)'},
        yaxis={'title': 'Count'}
    )

    # Create a plotly figure object with the trace and layout
    figure = {'data': [trace], 'layout': layout}

    return figure'''



<!--<html>
  <head>
    <title>My Flask App</title>
    Bootstrap CSS
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"
      integrity="sha384-OgVRvuATP1z7JjHLkuOU7Xw704+h835Lr+JQLhFNNjzDqtqF2n2Epzp3Xy3KaC5"
      crossorigin="anonymous">
    Custom CSS 
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
  </head>
  <body>
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
      <a class="navbar-brand" href="#">My Flask App</a>
      <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav"
        aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarNav">
        <ul class="navbar-nav">
          <li class="nav-item">
            <a class="nav-link" href="{{ url_for('predict') }}">Predict</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="{{ url_for('dashboard') }}">Dashboard</a>
          </li>
        </ul>
      </div>
    </nav>
    <div class="container">
      <div class="row justify-content-center align-items-center" style="height: 80vh;">
        <div class="col-md-6 text-center">
          <h1>Welcome to My Flask App</h1>
          <p class="lead">Click on the links above to access the prediction and dashboard pages.</p>
        </div>
      </div>
    </div>
    Bootstrap JS and jQuery 
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"
      integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj"
      crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.10.3/dist/umd/popper"
      integrity="sha384-RY2vIhezPf5zcOsKnJzufD2Q6MQ9hOZrqUjgAVUeMq3zqpbU6NEKjOevJmpOMMC4"
      crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"
      integrity="sha384-OgvrTb5n2KpeTE0GgS02nM/bkt"></script>

    </body>
    </html>-->





















         <form action="/compare" method="POST">
         <h3>Compare by:</h3>
         <select name="comp_type">
            <option value="brand" selected>Brand</option>
            <option value="display">Display</option>
            <option value="ram">RAM</option>
            <option value="model">Model</option>
         </select>

         {% if error %}
         <p class="error">{{ error }}</p>
         {% endif %}

         {% if comp_type == 'brand' %}
         <h3>Select Brands to compare:</h3>
         {% for brand in brand_list %}
         <input type="checkbox" name="brands[]" value="{{ brand }}"> {{ brand }}<br>
         {% endfor %}
         {% elif comp_type == 'display' %}
         <h3>Select Display Types to compare:</h3>
         {% for display in display_types %}
         <input type="checkbox" name="displays[]" value="{{ display }}"> {{ display }}<br>
         {% endfor %}
         {% elif comp_type == 'ram' %}
         <h3>Select RAM sizes to compare:</h3>
         {% for ram in ram_sizes %}
         <input type="checkbox" name="rams[]" value="{{ ram }}"> {{ ram }}<br>
         {% endfor %}
         {% elif comp_type == 'model' %}
         <h3>Select Models to compare:</h3>
         {% for model in model_list %}
         <input type="checkbox" name="models[]" value="{{ model }}"> {{ model }}<br>
         {% endfor %}
         {% endif %}

         <br>
         <input type="submit" value="Compare">
      </form>
      <br>

      {% if result %}
      <h2>{{ comp_type|capitalize }} Comparison Results:</h2>
      {{ result|safe }}
      {% endif %}



      @app.route('/compare', methods=['POST', 'GET'])
def compare():
    # Initialize variables
    result = ''
    
   
    if request.method == 'POST':
        # Get the selected comparison type
        comp_type = request.form.get('comp_type')
        
        # Depending on the selected comparison type, call the appropriate function
        if comp_type == 'brand':
            # Get the input values
            brand_list = request.form.get('brand_list').split(',')
            #data = pd.read_csv('laptop_data.csv')
            result = Brand_comparison(brand_list, data)
        elif comp_type == 'display':
            # Get the input values
            display_types = request.form.get('display_types').split(',')
            #data = pd.read_csv('laptop_data.csv')
            result = Display_comparison(display_types, data)
        elif comp_type == 'ram':
            # Get the input values
            ram_sizes = request.form.get('ram_sizes').split(',')
            #data = pd.read_csv('laptop_data.csv')
            result = Ram_comparison(ram_sizes, data)
        elif comp_type == 'model':
            # Get the input values
            model_list = request.form.get('model_list').split(',')
            #data = pd.read_csv('laptop_data.csv')
            result = Model_comparison(model_list, data)

        # Render the template with the results
        return render_template('compare.html', result=result, comp_type=comp_type)

    elif request.method == 'GET':
        return render_template('compare.html')