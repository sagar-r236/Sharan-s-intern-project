# ...

'''dash_app.layout = html.Div(children=[
    html.Thead([
        html.Title('Mobile Phone Prices and Features Dashboard'),
        html.Link(rel='stylesheet', href='/static/css/style.css')
    ]),

    html.Tbody(children=[
        html.H1(children='Mobile Phone Prices and Features'),

        html.Div(children='''
           
'''),

        dcc.Dropdown(
            id='brand-dropdown',
            options=[{'label': brand, 'value': brand} for brand in df['Brand'].unique()],
            value='Apple'
        ),

        dcc.Graph(
            id='price-graph'
        ),

        dcc.Graph(
            id='color-counts',
            figure={
                'data': [
                    go.Bar(
                        x=df['Color'].value_counts().index,
                        y=df['Color'].value_counts().values
                    )
                ],
                'layout': go.Layout(
                    title='Count of Mobile Phone Colors',
                    xaxis={'title': 'Color'},
                    yaxis={'title': 'Count'}
                )
            }
        ),

        dcc.Graph(
            id='brand-counts',
            figure={
                'data': [
                    go.Bar(
                        x=df['Brand'].value_counts().index,
                        y=df['Brand'].value_counts().values
                    )
                ],
                'layout': go.Layout(
                    title='Count of Mobile Phone Brands',
                    xaxis={'title': 'Brand'},
                    yaxis={'title': 'Count'}
                )
            }
        ),

        dcc.Graph(
            id='ram-counts',
            figure={
                'data': [
                    go.Bar(
                        x=df['Ram'].value_counts().index,
                        y=df['Ram'].value_counts().values
                    )
                ],
                'layout': go.Layout(
                    title='Count of Mobile Phone RAM Sizes',
                    xaxis={'title': 'RAM Size'},
                    yaxis={'title': 'Count'}
                )
            }
        ),
        dcc.Graph(
            id='price-distribution',
            figure={
            'data': [
                     go.Histogram(
                     x=df['Price'],
                     nbinsx=30
                      )
                   ],
           'layout': go.Layout(
                    title='Distribution of Mobile Phone Prices',
                    xaxis={'title': 'Price'},
                   yaxis={'title': 'Count'}
              )
            }
        )   
    ])
])'''

'''dash_app.layout = html.Div(children=[
    html.Thead([
        html.Title('Mobile Phone Prices and Features Dashboard'),
        html.Link(rel='stylesheet', href='/static/css/style.css')
    ]),

    html.Tbody(children=[
        html.H1(children='Mobile Phone Prices and Features'),

        html.Div(children='''
            #Select a brand to see the average price of their phones:
'''),

        dcc.Dropdown(
            id='brand-dropdown',
            options=[{'label': brand, 'value': brand} for brand in df['Brand'].unique()],
            value='Apple'
        ),

        html.Div(className='graph-container', children=[
            dcc.Graph(
                id='price-graph'
            ),

            dcc.Graph(
                id='color-counts',
                figure={
                    'data': [
                        go.Bar(
                            x=df['Color'].value_counts().index,
                            y=df['Color'].value_counts().values
                        )
                    ],
                    'layout': go.Layout(
                        title='Count of Mobile Phone Colors',
                        xaxis={'title': 'Color'},
                        yaxis={'title': 'Count'}
                    )
                }
            ),

            dcc.Graph(
                id='brand-counts',
                figure={
                    'data': [
                        go.Bar(
                            x=df['Brand'].value_counts().index,
                            y=df['Brand'].value_counts().values
                        )
                    ],
                    'layout': go.Layout(
                        title='Count of Mobile Phone Brands',
                        xaxis={'title': 'Brand'},
                        yaxis={'title': 'Count'}
                    )
                }
            ),
        ], style={'float': 'left', 'width': '75%'}),

        html.Div(className='graph-container', children=[
            dcc.Graph(
                id='ram-counts',
                figure={
                    'data': [
                        go.Bar(
                            x=df['Ram'].value_counts().index,
                            y=df['Ram'].value_counts().values
                        )
                    ],
                    'layout': go.Layout(
                        title='Count of Mobile Phone RAM Sizes',
                        xaxis={'title': 'RAM Size'},
                        yaxis={'title': 'Count'}
                    )
                }
            ),
            dcc.Graph(
                id='price-distribution',
                figure={
                    'data': [
                        go.Histogram(
                            x=df['Price'],
                            nbinsx=30
                        )
                    ],
                    'layout': go.Layout(
                        title='Distribution of Mobile Phone Prices',
                        xaxis={'title': 'Price'},
                        yaxis={'title': 'Count'}
                    )
                }
            )   
        ], style={'float': 'right', 'width': '25%'})  
    ])
])'''



'''@dash_app.callback(
    dash.dependencies.Output('price-distribution', 'figure'),
    [dash.dependencies.Input('brand-dropdown', 'value')]
)
def update_price_distribution(selected_brand):
    # Filter the data for the selected brand
    brand_data = df[df['Brand'] == selected_brand]

    # Create a plotly trace for the price distribution data
    trace = go.Histogram(
        x=brand_data['Price'],
        nbinsx=30
    )

    # Define the plot layout
    layout = go.Layout(
        title=f'Distribution of {selected_brand} Phone Prices',
        xaxis={'title': 'Price (USD)'},
        yaxis={'title': 'Count'}
    )

    # Create a plotly figure object with the trace and layout
    figure = {'data': [trace], 'layout': layout}

    return figure'''